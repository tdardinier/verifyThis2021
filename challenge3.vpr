// nxn matrix on heap

domain NMatrix {
  function slot(a: NMatrix, i: Int, j:Int): Ref
  function dim(a: NMatrix): Int
  function parent(r: Ref): NMatrix
  function Icoord(r: Ref): Int
  function Jcoord(r: Ref): Int

  axiom all_diff { // slot(m,i,j) is injective in all parameters
    forall m: NMatrix, i: Int, j:Int :: { slot(m,i,j) }
      parent(slot(m,i,j)) == m && Icoord(slot(m,i,j)) == i && Jcoord(slot(m,i,j)) == j 
  }

  axiom dim_nonneg {
    forall a: NMatrix :: { dim(a) }
      dim(a) >= 0
  }

  function tl_submatrix(a: NMatrix): NMatrix

  axiom tl_submatrix_def {
    forall a:NMatrix :: { tl_submatrix(a) } dim(a) >= 1 ==>
      dim(tl_submatrix(a)) == dim(a) - 1 &&
        forall i:Int, j:Int :: { slot(a, i, j) } {slot(tl_submatrix(a), i, j)} i >= 0 && i < dim(a) - 1 && j >= 0 && j < dim(a) - 1
        ==> slot(tl_submatrix(a), i, j) == slot(a, i, j)
  }

}

field val: Int // heap location per slot per matrix

define M(i, j) slot(m,i,j).val // maybe use this in code?

define access_matrix(m) forall i:Int, j:Int :: {slot(m,i,j)} 0 <= i && 0 <= j && i < dim(m) && j < dim(m) ==> acc(slot(m,i,j).val)
define access_matrix_frac(m, p) forall i:Int, j:Int :: {slot(m,i,j)} 0 <= i && 0 <= j && i < dim(m) && j < dim(m) ==> acc(slot(m,i,j).val, p)

define access_row(m, i) forall j:Int :: {slot(m,i,j)} 0 <= j && j < dim(m) ==> acc(slot(m,i,j).val)
define access_row_frac(m, i, p) forall j:Int :: {slot(m,i,j)} 0 <= j && j < dim(m) ==> acc(slot(m,i,j).val, p)

define access_column(m, j) forall i:Int :: {slot(m,i,j)} 0 <= i && i < dim(m) ==> acc(slot(m,i,j).val)
define access_column_frac(m, j, p) forall i:Int :: {slot(m,i,j)} 0 <= i && i < dim(m) ==> acc(slot(m,i,j).val, p)

function rep_row(m: NMatrix, row: Int, s: Multiset[Int], j: Int): Bool
  requires access_row_frac(m, row, 1/4)
  requires j >= 0 && j <= dim(m)
  requires row >= 0 && row < dim(m)
{
  j == dim(m) ? |s| == 0 : (M(row, j) in s) > 0 && rep_row(m, row, s setminus Multiset( M(row, j) ), j + 1)
}

function rep_column(m: NMatrix, column: Int, s: Multiset[Int], i: Int): Bool
  requires access_column_frac(m, column, 1/4)
  requires i >= 0 && i <= dim(m)
  requires column >= 0 && column < dim(m)
{
  i == dim(m) ? |s| == 0 : (M(i, column) in s) > 0 && rep_column(m, column, s setminus Multiset( M(i, column) ), i + 1)
}

function ind_ms(i: Int, s: Seq[Multiset[Int]]): Bool
{
  i >= 0 && i < |s|
}

function union_seq_multi(s: Seq[Multiset[Int]]): Multiset[Int]
{
  |s| == 0 ? Multiset() : s[0] union union_seq_multi(s[1..])
}

method allocMatrix(d:Int) returns (m: NMatrix)
  requires d >= 0
  ensures dim(m) == d
  ensures access_matrix(m)

function ind(a: Seq[Int], i: Int): Bool { i >= 0 && i < |a| }
function ind_ss(a: Seq[Seq[Int]], i: Int): Bool
  ensures result ==> i >= 0 && i < |a|
{
  i >= 0 && i < |a|
}

function two_exponent(n: Int): Int
    ensures n >= 0 ==> result >= 1
    ensures n < 0 ==> result == 0
{
    n > 0 ? 2 * two_exponent(n - 1) : (n == 0 ? 1 : 0)
}

method create_rep_by_column(m: NMatrix, column: Int, n: Int) returns (rcolumn: Multiset[Int])
  requires access_matrix_frac(m, 1/3)
  requires column >= 0 && column < dim(m)
  requires n >= 0
  requires n <= dim(m)
  ensures access_matrix_frac(m, 1/3)
  ensures rep_column(m, column, rcolumn, n)
{
  if (n >= dim(m)) {
    rcolumn := Multiset()
  }
  else {
    var bcolumn: Multiset[Int]
    bcolumn := create_rep_by_column(m, column, n + 1)
    rcolumn := Multiset(M(n, column)) union bcolumn
    assert rcolumn setminus Multiset( M(n, column) ) == bcolumn
  }
}

method create_rep_by_row(m: NMatrix, row: Int, n: Int) returns (rrow: Multiset[Int])
  requires access_matrix_frac(m, 1/3)
  requires row >= 0 && row < dim(m)
  requires n >= 0
  requires n <= dim(m)
  ensures access_matrix_frac(m, 1/3)
  ensures rep_row(m, row, rrow, n)
{
  if (n >= dim(m)) {
    rrow := Multiset()
  }
  else {
    var brow: Multiset[Int]
    brow := create_rep_by_row(m, row, n + 1)
    rrow := Multiset(M(row, n)) union brow
    assert rrow setminus Multiset( M(row, n) ) == brow
  }
}

method represent_by_row_rec(m: NMatrix, n: Int) returns (by_row: Seq[Multiset[Int]])
  requires access_matrix_frac(m, 1/2)
  requires n >= 0
  requires n <= dim(m)
  ensures |by_row| == n
  ensures access_matrix_frac(m, 1/2)
  ensures forall i:Int :: { by_row[i] } i >= 0 && i < n ==> rep_row(m, i, by_row[i], 0)
{
  if (n > 0) {
    var by_row_rec: Seq[Multiset[Int]]
    by_row_rec := represent_by_row_rec(m, n - 1)
    var s: Multiset[Int]
    s := create_rep_by_row(m, n - 1, 0)
    by_row := by_row_rec ++ Seq(s)
  }
  else {
    by_row := Seq()
        assume false

  }
}



// TO PROVE
method represent_by_row(m: NMatrix) returns (by_row: Seq[Multiset[Int]])
  requires access_matrix_frac(m, 1/2)
  ensures |by_row| == dim(m)
  ensures access_matrix_frac(m, 1/2)
  ensures rep_matrix_by_row(m, by_row)

// TO PROVE
method represent_by_column(m: NMatrix) returns (by_column: Seq[Multiset[Int]])
  requires access_matrix_frac(m, 1/2)
  ensures |by_column| == dim(m)
  ensures access_matrix_frac(m, 1/2)
  ensures rep_matrix_by_column(m, by_column)

function rep_matrix_by_row(m: NMatrix, s: Seq[Multiset[Int]]): Bool
  requires access_matrix_frac(m, 1/2)
{
  dim(m) == |s| &&
    forall i:Int :: { rep_row(m, i, s[i], 0) } i >= 0 && i < |s| ==> rep_row(m, i, s[i], 0)
}

function rep_matrix_by_column(m: NMatrix, s: Seq[Multiset[Int]]): Bool
  requires access_matrix_frac(m, 1/2)
{
  dim(m) == |s| &&
    forall j:Int :: { rep_column(m, j, s[j], 0) } j >= 0 && j < |s| ==> rep_column(m, j, s[j], 0)
}

method lemma_rep_column_unique(m: NMatrix, c: Int, r1: Multiset[Int], r2: Multiset[Int], i: Int)
  requires c >= 0 && c < dim(m)
  requires access_column_frac(m, c, 1/2)
  requires i >= 0 && i <= dim(m)
  requires rep_column(m, c, r1, i)
  requires rep_column(m, c, r2, i)
  ensures access_column_frac(m, c, 1/2)
  ensures r1 == r2
{
  if (i < dim(m)) {
    var a: Multiset[Int] := r1 setminus Multiset( M(i, c) )
    var b: Multiset[Int] := r2 setminus Multiset( M(i, c) )
    assert r1 == Multiset(M(i, c)) union a
    assert r2 == Multiset(M(i, c)) union b
    lemma_rep_column_unique(m, c, a, b , i + 1)
  }
}


method lemma_rep_row_unique(m: NMatrix, c: Int, r1: Multiset[Int], r2: Multiset[Int], i: Int)
  requires c >= 0 && c < dim(m)
  requires access_row_frac(m, c, 1/2)
  requires i >= 0 && i <= dim(m)
  requires rep_row(m, c, r1, i)
  requires rep_row(m, c, r2, i)
  ensures access_row_frac(m, c, 1/2)
  ensures r1 == r2
{
  if (i < dim(m)) {
    var a: Multiset[Int] := r1 setminus Multiset( M(c, i) )
    var b: Multiset[Int] := r2 setminus Multiset( M(c, i) )
    assert r1 == Multiset(M(c, i)) union a
    assert r2 == Multiset(M(c, i)) union b
    lemma_rep_row_unique(m, c, a, b , i + 1)
  }
}

// TO PROVE
method lemma_rep_submatrix_row(m: NMatrix, by_row: Seq[Multiset[Int]]) returns (by_row_big: Seq[Multiset[Int]], r1: Multiset[Int], r2: Multiset[Int], r3: Multiset[Int])
  requires access_matrix_frac(m, 1/2)
  requires rep_matrix_by_row(m, by_row)
  requires dim(m) >= 1
  ensures access_matrix_frac(m, 1/2)
  ensures rep_matrix_by_row(tl_submatrix(m), by_row_big)

  ensures union_seq_multi(by_row_big) union r1 union r2 union r3 == union_seq_multi(by_row)
  
  ensures rep_column(m, dim(m) - 1, r1, 0)
  ensures r2 == Multiset(M(dim(m) - 1, dim(m) - 1))
  ensures rep_row(m, dim(m) - 1, r3, 0)

// TO PROVE
method lemma_rep_submatrix_column(m: NMatrix, by_column: Seq[Multiset[Int]]) returns (by_column_big: Seq[Multiset[Int]], r1: Multiset[Int], r2: Multiset[Int], r3: Multiset[Int])
  requires access_matrix_frac(m, 1/2)
  requires rep_matrix_by_column(m, by_column)
  requires dim(m) >= 1
  ensures access_matrix_frac(m, 1/2)
  ensures rep_matrix_by_column(tl_submatrix(m), by_column_big)
  
  ensures union_seq_multi(by_column_big) union r1 union r2 union r3 == union_seq_multi(by_column)
  
  ensures rep_column(m, dim(m) - 1, r1, 0)
  ensures r2 == Multiset(M(dim(m) - 1, dim(m) - 1))
  ensures rep_row(m, dim(m) - 1, r3, 0)



method lemma_same_union(m: NMatrix, by_row: Seq[Multiset[Int]], by_column: Seq[Multiset[Int]])
  requires access_matrix_frac(m, 2/3)
  requires rep_matrix_by_row(m, by_row)
  requires rep_matrix_by_column(m, by_column)
  ensures access_matrix_frac(m, 2/3)
  ensures union_seq_multi(by_column) == union_seq_multi(by_row)
{
  if (dim(m) == 0) {
  }
  else {
    var n: Int := dim(m)
    var a: NMatrix := tl_submatrix(m)

    var by_row_big: Seq[Multiset[Int]]
    var row_r1: Multiset[Int]
    var row_r2: Multiset[Int]
    var row_r3: Multiset[Int]

    by_row_big, row_r1, row_r2, row_r3 := lemma_rep_submatrix_row(m, by_row)

    var by_column_big: Seq[Multiset[Int]]
    var column_r1: Multiset[Int]
    var column_r2: Multiset[Int]
    var column_r3: Multiset[Int]

    by_column_big, column_r1, column_r2, column_r3 := lemma_rep_submatrix_column(m, by_column)
    lemma_same_union(a, by_row_big, by_column_big)


    lemma_rep_row_unique(m, n - 1, row_r3, column_r3, 0)
    lemma_rep_column_unique(m, n - 1, row_r1, column_r1, 0)
  }
}

method represent(m: NMatrix) returns (by_row: Seq[Multiset[Int]], by_column: Seq[Multiset[Int]], all: Multiset[Int])
  requires access_matrix_frac(m, 3/4)
  ensures |by_row| == dim(m) && |by_column| == dim(m)
  ensures access_matrix_frac(m, 3/4)
  ensures rep_matrix_by_row(m, by_row)
  ensures rep_matrix_by_column(m, by_column)
  ensures union_seq_multi(by_row) == all
  ensures union_seq_multi(by_column) == all
{
  by_row := represent_by_row(m)
  by_column := represent_by_column(m)
  all := union_seq_multi(by_row)
  lemma_same_union(m, by_row, by_column)
}



// CODE

method sort_row(m: NMatrix, row: Int, ascending: Bool, rep: Multiset[Int])
  requires access_row(m, row)
  requires row >= 0 && row < dim(m)
  requires rep_row(m, row, rep, 0)
  ensures access_row(m, row)
  ensures rep_row(m, row, rep, 0)


method sort_column(m: NMatrix, column: Int, rep: Multiset[Int])
  requires access_column(m, column)
  requires column >= 0 && column < dim(m)
  requires rep_column(m, column, rep, 0)
  ensures access_column(m, column)
  ensures rep_column(m, column, rep, 0)

method shearsort(n: Int, m: NMatrix)
  requires access_matrix(m)
  requires dim(m) == n
  ensures access_matrix(m)
{
  var p: Int := 0

  var by_row: Seq[Multiset[Int]]
  var by_column: Seq[Multiset[Int]]
  var all: Multiset[Int]
  by_row, by_column, all := represent(m)

  // i < ceil(log2(n)) + 1
  // <=> i < log2(n) + 1
  // <=> i - 1 < log2(n)
  // <=> 2^(i - 1) < n
  // <=> two_exponent(i - 1) < n
  while (two_exponent(p - 1) < n)
    invariant access_matrix(m)
    invariant rep_matrix_by_row(m, by_row)
    invariant rep_matrix_by_column(m, by_column)
    invariant union_seq_multi(by_row) == all
    invariant union_seq_multi(by_column) == all
  {

    // First inner parallel loop
    exhale forall tid:Int :: { rep_row(m, tid, by_row[tid], 0) } tid >= 0 && tid < n ==> P1(m, tid, by_row)
    inhale forall tid:Int :: { rep_row(m, tid, by_row[tid], 0) } tid >= 0 && tid < n ==> Q1(m, tid, by_row)
    assert rep_matrix_by_row(m, by_row)

    by_column := represent_by_column(m)
    assert rep_matrix_by_column(m, by_column)

    lemma_same_union(m, by_row, by_column)

    assert rep_matrix_by_column(m, by_column)


    // Second inner parallel loop
    exhale forall tid:Int :: { rep_column(m, tid, by_column[tid], 0) } tid >= 0 && tid < n ==> P2(m, tid, by_column)
    inhale forall tid:Int :: { rep_column(m, tid, by_column[tid], 0) } tid >= 0 && tid < n ==> Q2(m, tid, by_column)

    assert rep_matrix_by_column(m, by_column)

    by_row := represent_by_row(m)
    lemma_same_union(m, by_row, by_column)


    p := p + 1
  }
}

function asRowColSeqSeq(m: NMatrix) : Seq[Seq[Int]]
    requires access_matrix_frac(m, 1/2)
    ensures |result| == dim(m) && (forall row:Int , col: Int :: {result[row][col]}{M(row,col)} 
    0 <= row && row < dim(m) ==> 
      |result[row]| == dim(m) && (0 <= col && col < dim(m) ==> result[row][col] == M(row,col)))
// easy to implement if needed

function asColRowSeqSeq(m: NMatrix) : Seq[Seq[Int]]
    requires access_matrix_frac(m, 1/2)
    ensures |result| == dim(m) && (forall col:Int , row: Int :: {result[col][row]}{M(row,col)} 0 <= col && col < dim(m) ==> 
      |result[col]| == dim(m) && (0 <= row && row < dim(m) ==> result[col][row] == M(row,col)))
// easy to implement if needed

function sortSeq(s:Seq[Int], incrOrder: Bool) : Seq[Int]
  ensures |result| == |s| && // some way of expressing permutation
    forall i:Int, j:Int :: 0 <= i && i < j && j < |s| ==> (incrOrder ? s[i] <= s[j] : s[i] >= s[j])

function firstIndexLarger(s:Seq[Int], k:Int) : Int
  ensures 0 <= result && result <= |s|
  ensures result < |s| ==> s[result] >= k
  ensures forall i:Int :: 0 <= i && i < result ==> s[i] < k 

function lastIndexSmaller(s:Seq[Int], k:Int) : Int
  ensures -1 <= result && result < |s|
  ensures result + 1 < |s| ==> s[result + 1] > k
  ensures forall i:Int :: 0 <= i && i <= result ==> s[i] <= k 

function countEltsGeq(s:Seq[Int], k:Int) : Int
  
define countGt(s,k) (|s| - lastIndexSmaller(sortSeq(s,true),k))
// give me some column index for a column (columns as in s) with the minimal number of entries > k
function colmin_gt(m: NMatrix, s: Seq[Seq[Int]], k:Int) : Int
  requires access_matrix_frac(m, 1/2)
  requires asColRowSeqSeq(m) == s
  ensures 0 <= result && result < dim(m) && forall col : Int :: 0 <= col && col < dim(m) && col != result ==> countGt(s[result],k) <= countGt(s[col],k)


// Parallel loops

define P1(m, tid, by_row) access_row(m, tid) &&tid >= 0 && tid < dim(m) && |by_row| == dim(m) && rep_row(m, tid, by_row[tid], 0)
define Q1(m, tid, by_row) access_row(m, tid) && rep_row(m, tid, by_row[tid], 0)

method first_inner_loop(m: NMatrix, tid: Int, by_row: Seq[Multiset[Int]])
  requires P1(m, tid, by_row)
  ensures Q1(m, tid, by_row)
{
  sort_row(m, tid, tid % 2 == 0, by_row[tid])
}

define P2(m, tid, by_row) access_column(m, tid) && tid >= 0 && tid < dim(m) && |by_column| == dim(m) && rep_column(m, tid, by_column[tid], 0)
define Q2(m, tid, by_row) access_column(m, tid) && rep_column(m, tid, by_column[tid], 0)

method second_inner_loop(m: NMatrix, tid: Int, by_column: Seq[Multiset[Int]])
  requires P2(m, tid, by_column)
  ensures Q2(m, tid, by_column)
{
  sort_column(m, tid, by_column[tid])
}